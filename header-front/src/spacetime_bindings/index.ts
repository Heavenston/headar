// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ConnectToClient } from "./connect_to_client_reducer.ts";
export { ConnectToClient };
import { CreateAvailabilityRange } from "./create_availability_range_reducer.ts";
export { CreateAvailabilityRange };
import { CreateRangeLabel } from "./create_range_label_reducer.ts";
export { CreateRangeLabel };
import { CreateUser } from "./create_user_reducer.ts";
export { CreateUser };
import { DeleteAvailabilityRange } from "./delete_availability_range_reducer.ts";
export { DeleteAvailabilityRange };
import { DeleteRangeLabel } from "./delete_range_label_reducer.ts";
export { DeleteRangeLabel };
import { DeleteUser } from "./delete_user_reducer.ts";
export { DeleteUser };
import { DiconnectFromClient } from "./diconnect_from_client_reducer.ts";
export { DiconnectFromClient };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };

// Import and reexport all table handle types
import { RangeAvailabilityTableHandle } from "./range_availability_table.ts";
export { RangeAvailabilityTableHandle };
import { RangeLabelsTableHandle } from "./range_labels_table.ts";
export { RangeLabelsTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserIdentityTableHandle } from "./user_identity_table.ts";
export { UserIdentityTableHandle };

// Import and reexport all types
import { RangeAvailability } from "./range_availability_type.ts";
export { RangeAvailability };
import { RangeLabel } from "./range_label_type.ts";
export { RangeLabel };
import { User } from "./user_type.ts";
export { User };
import { UserIdentity } from "./user_identity_type.ts";
export { UserIdentity };

const REMOTE_MODULE = {
  tables: {
    range_availability: {
      tableName: "range_availability",
      rowType: RangeAvailability.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    range_labels: {
      tableName: "range_labels",
      rowType: RangeLabel.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user_identity: {
      tableName: "user_identity",
      rowType: UserIdentity.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    connect_to_client: {
      reducerName: "connect_to_client",
      argsType: ConnectToClient.getTypeScriptAlgebraicType(),
    },
    create_availability_range: {
      reducerName: "create_availability_range",
      argsType: CreateAvailabilityRange.getTypeScriptAlgebraicType(),
    },
    create_range_label: {
      reducerName: "create_range_label",
      argsType: CreateRangeLabel.getTypeScriptAlgebraicType(),
    },
    create_user: {
      reducerName: "create_user",
      argsType: CreateUser.getTypeScriptAlgebraicType(),
    },
    delete_availability_range: {
      reducerName: "delete_availability_range",
      argsType: DeleteAvailabilityRange.getTypeScriptAlgebraicType(),
    },
    delete_range_label: {
      reducerName: "delete_range_label",
      argsType: DeleteRangeLabel.getTypeScriptAlgebraicType(),
    },
    delete_user: {
      reducerName: "delete_user",
      argsType: DeleteUser.getTypeScriptAlgebraicType(),
    },
    diconnect_from_client: {
      reducerName: "diconnect_from_client",
      argsType: DiconnectFromClient.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ConnectToClient", args: ConnectToClient }
| { name: "CreateAvailabilityRange", args: CreateAvailabilityRange }
| { name: "CreateRangeLabel", args: CreateRangeLabel }
| { name: "CreateUser", args: CreateUser }
| { name: "DeleteAvailabilityRange", args: DeleteAvailabilityRange }
| { name: "DeleteRangeLabel", args: DeleteRangeLabel }
| { name: "DeleteUser", args: DeleteUser }
| { name: "DiconnectFromClient", args: DiconnectFromClient }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  connectToClient(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    ConnectToClient.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("connect_to_client", __argsBuffer, this.setCallReducerFlags.connectToClientFlags);
  }

  onConnectToClient(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("connect_to_client", callback);
  }

  removeOnConnectToClient(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("connect_to_client", callback);
  }

  createAvailabilityRange(rangeStart: string, rangeEnd: string, availabilityLevel: number) {
    const __args = { rangeStart, rangeEnd, availabilityLevel };
    let __writer = new BinaryWriter(1024);
    CreateAvailabilityRange.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_availability_range", __argsBuffer, this.setCallReducerFlags.createAvailabilityRangeFlags);
  }

  onCreateAvailabilityRange(callback: (ctx: ReducerEventContext, rangeStart: string, rangeEnd: string, availabilityLevel: number) => void) {
    this.connection.onReducer("create_availability_range", callback);
  }

  removeOnCreateAvailabilityRange(callback: (ctx: ReducerEventContext, rangeStart: string, rangeEnd: string, availabilityLevel: number) => void) {
    this.connection.offReducer("create_availability_range", callback);
  }

  createRangeLabel(title: string, colorR: number, colorG: number, colorB: number, rangeStart: string, rangeEnd: string) {
    const __args = { title, colorR, colorG, colorB, rangeStart, rangeEnd };
    let __writer = new BinaryWriter(1024);
    CreateRangeLabel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_range_label", __argsBuffer, this.setCallReducerFlags.createRangeLabelFlags);
  }

  onCreateRangeLabel(callback: (ctx: ReducerEventContext, title: string, colorR: number, colorG: number, colorB: number, rangeStart: string, rangeEnd: string) => void) {
    this.connection.onReducer("create_range_label", callback);
  }

  removeOnCreateRangeLabel(callback: (ctx: ReducerEventContext, title: string, colorR: number, colorG: number, colorB: number, rangeStart: string, rangeEnd: string) => void) {
    this.connection.offReducer("create_range_label", callback);
  }

  createUser(username: string) {
    const __args = { username };
    let __writer = new BinaryWriter(1024);
    CreateUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_user", __argsBuffer, this.setCallReducerFlags.createUserFlags);
  }

  onCreateUser(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.onReducer("create_user", callback);
  }

  removeOnCreateUser(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.offReducer("create_user", callback);
  }

  deleteAvailabilityRange(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeleteAvailabilityRange.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_availability_range", __argsBuffer, this.setCallReducerFlags.deleteAvailabilityRangeFlags);
  }

  onDeleteAvailabilityRange(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("delete_availability_range", callback);
  }

  removeOnDeleteAvailabilityRange(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("delete_availability_range", callback);
  }

  deleteRangeLabel(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeleteRangeLabel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_range_label", __argsBuffer, this.setCallReducerFlags.deleteRangeLabelFlags);
  }

  onDeleteRangeLabel(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("delete_range_label", callback);
  }

  removeOnDeleteRangeLabel(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("delete_range_label", callback);
  }

  deleteUser(userId: number) {
    const __args = { userId };
    let __writer = new BinaryWriter(1024);
    DeleteUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_user", __argsBuffer, this.setCallReducerFlags.deleteUserFlags);
  }

  onDeleteUser(callback: (ctx: ReducerEventContext, userId: number) => void) {
    this.connection.onReducer("delete_user", callback);
  }

  removeOnDeleteUser(callback: (ctx: ReducerEventContext, userId: number) => void) {
    this.connection.offReducer("delete_user", callback);
  }

  diconnectFromClient() {
    this.connection.callReducer("diconnect_from_client", new Uint8Array(0), this.setCallReducerFlags.diconnectFromClientFlags);
  }

  onDiconnectFromClient(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("diconnect_from_client", callback);
  }

  removeOnDiconnectFromClient(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("diconnect_from_client", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

}

export class SetReducerFlags {
  connectToClientFlags: CallReducerFlags = 'FullUpdate';
  connectToClient(flags: CallReducerFlags) {
    this.connectToClientFlags = flags;
  }

  createAvailabilityRangeFlags: CallReducerFlags = 'FullUpdate';
  createAvailabilityRange(flags: CallReducerFlags) {
    this.createAvailabilityRangeFlags = flags;
  }

  createRangeLabelFlags: CallReducerFlags = 'FullUpdate';
  createRangeLabel(flags: CallReducerFlags) {
    this.createRangeLabelFlags = flags;
  }

  createUserFlags: CallReducerFlags = 'FullUpdate';
  createUser(flags: CallReducerFlags) {
    this.createUserFlags = flags;
  }

  deleteAvailabilityRangeFlags: CallReducerFlags = 'FullUpdate';
  deleteAvailabilityRange(flags: CallReducerFlags) {
    this.deleteAvailabilityRangeFlags = flags;
  }

  deleteRangeLabelFlags: CallReducerFlags = 'FullUpdate';
  deleteRangeLabel(flags: CallReducerFlags) {
    this.deleteRangeLabelFlags = flags;
  }

  deleteUserFlags: CallReducerFlags = 'FullUpdate';
  deleteUser(flags: CallReducerFlags) {
    this.deleteUserFlags = flags;
  }

  diconnectFromClientFlags: CallReducerFlags = 'FullUpdate';
  diconnectFromClient(flags: CallReducerFlags) {
    this.diconnectFromClientFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get rangeAvailability(): RangeAvailabilityTableHandle {
    return new RangeAvailabilityTableHandle(this.connection.clientCache.getOrCreateTable<RangeAvailability>(REMOTE_MODULE.tables.range_availability));
  }

  get rangeLabels(): RangeLabelsTableHandle {
    return new RangeLabelsTableHandle(this.connection.clientCache.getOrCreateTable<RangeLabel>(REMOTE_MODULE.tables.range_labels));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userIdentity(): UserIdentityTableHandle {
    return new UserIdentityTableHandle(this.connection.clientCache.getOrCreateTable<UserIdentity>(REMOTE_MODULE.tables.user_identity));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
